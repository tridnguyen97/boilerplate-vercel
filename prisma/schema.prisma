// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  USER  @map("user")
  ADMIN @map("admin")
}

model users {
  id              String   @id @default(uuid()) @db.Uuid
  createdAt       DateTime @default(now())
  email           String   @unique
  isEmailVerified Boolean  @default(false)
  name            String
  password        String
  role            Roles    @default(USER)
  updatedAt       DateTime @updatedAt
  tokens          tokens[]
  groups          groups[]
  aid             anonymousUsers?
}

enum tokenTypes {
  ACCESS
  REFRESH
  REFRESH_PASSWORD
  VERIFY_EMAIL
}

model tokens {
  id          String   @id @default(uuid()) @db.Uuid
  blacklisted Boolean
  createdAt   DateTime @default(now())
  expires     DateTime @db.Timestamp
  token       String   @unique @db.VarChar(255)
  type        String
  updatedAt   DateTime @updatedAt
  user        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.Uuid
}

model videos {
  id          String        @id @default(uuid()) @db.Uuid
  thumbnailId String        @unique
  fileId      String        @unique
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categories  categoriesOnVideos[]
}

model groups {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  owner       users         @relation(fields: [ownerId], references: [id])
  ownerId     String        @db.Uuid
  contacts    contacts[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model contacts {
  id          String   @id @default(uuid()) @db.Uuid
  user        anonymousUsers?    @relation(fields: [userId], references: [id])
  userId      String?   @unique @db.Uuid
  group       groups?   @relation(fields: [groupId], references: [id])
  groupId     String?   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model anonymousUsers {
  id          String    @id @default(uuid()) @db.Uuid
  nickname    String
  contacts    contacts?
  followedBy anonymousFriends[]  @relation("following")
  following  anonymousFriends[]  @relation("follower")
  deviceId    String    @unique
  createdAt   DateTime  @default(now())
  user        users?    @relation(fields: [userId], references: [id])
  userId      String?    @unique @db.Uuid
}

model categories {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  videos      categoriesOnVideos[]
}

model categoriesOnVideos {
  video      videos?     @relation(fields: [videoId], references: [id])
  videoId    String  @db.Uuid
  category   categories? @relation(fields: [categoryId], references: [id])
  categoryId String @db.Uuid 
  createdAt DateTime @default(now())

  @@id([videoId, categoryId])
}

model anonymousFriends {
  follower    anonymousUsers @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.Uuid
  following   anonymousUsers @relation("following", fields: [followingId], references: [id])
  followingId String @db.Uuid
  relationshipStatus     RelationshipStatus?
  notificationPreference NotificationPreference?
  @@id([followerId, followingId])
}

enum RelationshipStatus {
  FAMILY
  FRIEND
  ACQUAINTANCE
}

enum NotificationPreference {
  MUTED_UNTIL_TOMORROW
  MUTED_FOREVER
  NORMAL
}